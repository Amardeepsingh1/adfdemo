{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "learnadff"
		},
		"ls_af_functionKey": {
			"type": "secureString",
			"metadata": "Secure string for 'functionKey' of 'ls_af'"
		},
		"ls_blob_RestAPI_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_blob_RestAPI'"
		},
		"ls_light_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_light'"
		},
		"ls_lightstorage_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_lightstorage'"
		},
		"ls_RestService_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "http://dummy.restapiexample.com/api/v1/employees"
		},
		"ls_af_properties_typeProperties_functionAppUrl": {
			"type": "string",
			"defaultValue": "https://sqlforapp.azurewebsites.net"
		},
		"ls_lightstorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://lighttstorage.dfs.core.windows.net"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/File_Structure_Validation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "fileStructureiterate",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.pInvokedFileStructure",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "ExtractFileStructure",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "vFileStructure",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "database_structure_iterate",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.pDatabaseStructure",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "ExtractDatabaseStructure",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "vDatabaseStructure",
										"value": {
											"value": "@item().columnname",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "CreateConcatenatedStringFileStructure",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "fileStructureiterate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "vStringFileStructure",
							"value": {
								"value": "@join(variables('vFileStructure'),'|')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CreateConcatenatedStringDatabaseStructure",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "database_structure_iterate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "vStringDatabaseStructure",
							"value": {
								"value": "@join(variables('vDatabaseStructure'),'|')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CompareStructureStrings",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CreateConcatenatedStringFileStructure",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CreateConcatenatedStringDatabaseStructure",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nvariables('vStringDatabaseStructure'),variables('vStringFileStructure')\n)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Update to failed",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[fv_insert_Update_Tracking]",
										"storedProcedureParameters": {
											"pBatchid": {
												"value": {
													"value": "@pipeline().parameters.pBHID",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"pFileName": {
												"value": {
													"value": "@pipeline().parameters.pInvokedFileName",
													"type": "Expression"
												},
												"type": "String"
											},
											"pReason": {
												"value": "Improper column sequence",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_light",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "true",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						}
					}
				],
				"parameters": {
					"pInvokedFileStructure": {
						"type": "array"
					},
					"pInvokedFileColCount": {
						"type": "int",
						"defaultValue": 4
					},
					"pInvokedFileName": {
						"type": "string",
						"defaultValue": "dec"
					},
					"pDatabaseStructure": {
						"type": "array"
					},
					"pBHID": {
						"type": "int",
						"defaultValue": 0
					}
				},
				"variables": {
					"vFileStructure": {
						"type": "Array"
					},
					"vDatabaseStructure": {
						"type": "Array"
					},
					"vStringFileStructure": {
						"type": "String"
					},
					"vStringDatabaseStructure": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_light')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/File_Validation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "validates files then accepts or rejects them",
				"activities": [
					{
						"name": "Duplicate File CHeck",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[fv_duplicate_file_chec]",
								"storedProcedureParameters": {
									"pfile_name": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.pFileName",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "ds_light_Pull_Master",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Duplicate File CHeck",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Duplicate File CHeck').output.firstRow.a,'not exists')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Update to failed",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[fv_insert_Update_Tracking]",
										"storedProcedureParameters": {
											"pBatchid": {
												"value": {
													"value": "@pipeline().parameters.pBatchId",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"pFileName": {
												"value": {
													"value": "@pipeline().parameters.pFileName",
													"type": "Expression"
												},
												"type": "String"
											},
											"pReason": {
												"value": "File with same name already processed",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_light",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "File_name_check",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[fv_filename_validation]",
							"storedProcedureParameters": {
								"BHID": {
									"value": {
										"value": "@pipeline().parameters.pBatchId",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"var": {
									"value": {
										"value": "@pipeline().parameters.pFileName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_light",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get_column_count",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "File_name_check",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_fv_stagingFolderFile",
								"type": "DatasetReference",
								"parameters": {
									"ds_p_fileName": {
										"value": "@pipeline().parameters.pFileName",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"columnCount",
								"structure"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Get_column_count",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "GetColNamesFromDatabase",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "File_Structure_Validation",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pInvokedFileStructure": {
									"value": "@activity('Get_column_count').output.structure",
									"type": "Expression"
								},
								"pInvokedFileColCount": {
									"value": "@activity('Get_column_count').output.columnCount",
									"type": "Expression"
								},
								"pInvokedFileName": {
									"value": "@pipeline().parameters.pFileName",
									"type": "Expression"
								},
								"pDatabaseStructure": {
									"value": "@activity('GetColNamesFromDatabase').output.value",
									"type": "Expression"
								},
								"pBHID": {
									"value": "@pipeline().parameters.pBatchId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "GetColNamesFromDatabase",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select columnname from FV_name_check where source_identified='sr' ",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "ds_light_Pull_Master",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"pFileName": {
						"type": "string",
						"defaultValue": "abc"
					},
					"pBatchId": {
						"type": "string",
						"defaultValue": "23"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_light_Pull_Master')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_light')]",
				"[concat(variables('factoryId'), '/datasets/ds_fv_stagingFolderFile')]",
				"[concat(variables('factoryId'), '/pipelines/File_Structure_Validation')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/File_Validation_Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "File_Validation_Master",
				"activities": [
					{
						"name": "Create Batch Id",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[create_batch_id]",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "ds_light_Pull_Master",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "GetFileNames",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Create Batch Id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "StagingFolder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Iterate over each file",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetFileNames",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetFileNames').output.childitems",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "File validation pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Insert File Entry",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "File_Validation",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"pFileName": {
												"value": "@{item().name}",
												"type": "Expression"
											},
											"pBatchId": {
												"value": "@activity('Create Batch Id').output.firstRow.a",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Insert File Entry",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[fv_insert_Update_Tracking]",
										"storedProcedureParameters": {
											"pBatchid": {
												"value": {
													"value": "@activity('Create Batch Id').output.firstRow.a",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"pFileName": {
												"value": {
													"value": "@{item().name}",
													"type": "Expression"
												},
												"type": "String"
											},
											"pReason": {
												"value": null,
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_light",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_light_Pull_Master')]",
				"[concat(variables('factoryId'), '/datasets/StagingFolder')]",
				"[concat(variables('factoryId'), '/pipelines/File_Validation')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_light')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Master_Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "pip_source_tbl",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "stl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pip_source_tbl_copy1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "tobefailed",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/stl')]",
				"[concat(variables('factoryId'), '/pipelines/tobefailed')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RESTAPI')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "RestResource1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestResource1')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "transfer data from srouce to adls",
				"activities": [
					{
						"name": "get_last_max_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[get_last_max_date]",
								"storedProcedureParameters": {
									"table_name": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.ptable_name",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "ds_light_Pull_Master",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "get_source_max_lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "get_last_max_date",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "get_inr_col",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "get_dest_Container",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from @{pipeline().parameters.ptable_name} where @{activity('get_inr_col').output.firstRow.a} > \n'@{activity('get_last_max_date').output.firstRow.a}' and \n@{activity('get_inr_col').output.firstRow.a}<='@{activity('get_source_max_lookup').output.firstRow.a}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_light_Pull_Master",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_lightstorage",
								"type": "DatasetReference",
								"parameters": {
									"pfilename": {
										"value": "@concat(pipeline().parameters.ptable_name,'_',utcnow(),'.txt')",
										"type": "Expression"
									},
									"pContainerName": {
										"value": "@{activity('get_dest_Container').output.firstRow.a}",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "get_source_max_lookup",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select max(modified_date) as a from @{pipeline().parameters.ptable_name}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "ds_light_Pull_Master",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "upsert_pull_Master",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[upsert_Pull_Master]",
							"storedProcedureParameters": {
								"max_date": {
									"value": {
										"value": "@activity('get_source_max_lookup').output.firstRow.a",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"table_name": {
									"value": {
										"value": "@pipeline().parameters.ptable_name",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_light",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "get_inr_col",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[get_conf_value]",
								"storedProcedureParameters": {
									"conf_type": {
										"type": "String",
										"value": "incr_col_name"
									},
									"table_name": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.ptable_name",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "ds_light_Pull_Master",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "get_dest_Container",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[get_conf_value]",
								"storedProcedureParameters": {
									"conf_type": {
										"type": "String",
										"value": "dest_container"
									},
									"table_name": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.ptable_name",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "ds_light_Pull_Master",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"ptable_name": {
						"type": "string",
						"defaultValue": "Source_Tbl"
					}
				},
				"variables": {
					"vget_last_max": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_light_Pull_Master')]",
				"[concat(variables('factoryId'), '/datasets/ds_lightstorage')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_light')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/temp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach12",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.arrayparam",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Append variable1",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "appendedarrayvariable",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ForEach12",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "debugarray",
							"value": {
								"value": "@variables('appendedarrayvariable')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable2",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "finalcolumn",
							"value": {
								"value": "@join(variables('debugarray'),'|')",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"arrayparam": {
						"type": "array",
						"defaultValue": [
							{
								"name": "ab"
							},
							{
								"name": "cd"
							},
							{
								"name": "ef"
							}
						]
					}
				},
				"variables": {
					"appendedarrayvariable": {
						"type": "Array"
					},
					"debugarray": {
						"type": "Array"
					},
					"finalcolumn": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tobefailed')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Stored procedure1",
						"description": "I have just added description to this procedure. Feel free to use",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[get_conf_value]"
						},
						"linkedServiceName": {
							"referenceName": "ls_light",
							"type": "LinkedServiceReference"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_light')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_lightstorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "empfile",
						"fileSystem": "pull"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_lightstorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResource1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_RestService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_RestService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StagingFolder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_lightstorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "staging",
						"fileSystem": "datamovement"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_lightstorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_fv_stagingFolderFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_lightstorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ds_p_fileName": {
						"type": "string",
						"defaultValue": "abc"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().ds_p_fileName",
							"type": "Expression"
						},
						"folderPath": "staging",
						"fileSystem": "datamovement"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_lightstorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_light_Pull_Master')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_light",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_light')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_lightstorage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_lightstorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"pfilename": {
						"type": "string",
						"defaultValue": "abc"
					},
					"pContainerName": {
						"type": "string",
						"defaultValue": "def"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().pfilename",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().pContainerName",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_lightstorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_RestService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('ls_RestService_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_af')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureFunction",
				"typeProperties": {
					"functionAppUrl": "[parameters('ls_af_properties_typeProperties_functionAppUrl')]",
					"functionKey": {
						"type": "SecureString",
						"value": "[parameters('ls_af_functionKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_blob_RestAPI')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_blob_RestAPI_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_light')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_light_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_lightstorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_lightstorage_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_lightstorage_accountKey')]"
					}
				}
			},
			"dependsOn": []
		}
	]
}